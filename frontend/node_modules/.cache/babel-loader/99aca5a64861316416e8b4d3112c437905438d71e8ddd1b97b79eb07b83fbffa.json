{"ast":null,"code":"// src/services/adminService.js\nconst adminService = {\n  // Create a new user\n  createUser: async (username, password, email, isAdmin) => {\n    const response = await fetch('/api/admin/users', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        password,\n        email,\n        isAdmin\n      }),\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create user');\n    }\n    return response.json();\n  },\n  // Delete a user\n  deleteUser: async username => {\n    const response = await fetch(`/api/admin/users/${username}`, {\n      method: 'DELETE',\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete user');\n    }\n    return response.json();\n  },\n  // Get all users\n  getAllUsers: async () => {\n    const response = await fetch('/api/admin/users', {\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to get users');\n    }\n    return response.json();\n  },\n  // Get user information\n  getUserInfo: async username => {\n    const response = await fetch(`/api/admin/users/${username}`, {\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to get user info');\n    }\n    return response.json();\n  },\n  // Update user password\n  updateUserPassword: async (username, newPassword) => {\n    const response = await fetch(`/api/admin/users/${username}/password`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        password: newPassword\n      }),\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update password');\n    }\n    return response.json();\n  },\n  // Update user email\n  updateUserEmail: async (username, newEmail) => {\n    const response = await fetch(`/api/admin/users/${username}/email`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email: newEmail\n      }),\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update email');\n    }\n    return response.json();\n  }\n};\nexport default adminService;","map":{"version":3,"names":["adminService","createUser","username","password","email","isAdmin","response","fetch","method","headers","body","JSON","stringify","credentials","ok","errorData","json","Error","message","deleteUser","getAllUsers","getUserInfo","updateUserPassword","newPassword","updateUserEmail","newEmail"],"sources":["/Users/kachonlai/Desktop/uni_proj/CSCI3100_Project_Demo/csci3100_D7/frontend/src/services/adminService.js"],"sourcesContent":["// src/services/adminService.js\r\nconst adminService = {\r\n    // Create a new user\r\n    createUser: async (username, password, email, isAdmin) => {\r\n      const response = await fetch('/api/admin/users', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password, email, isAdmin }),\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to create user');\r\n      }\r\n      \r\n      return response.json();\r\n    },\r\n    \r\n    // Delete a user\r\n    deleteUser: async (username) => {\r\n      const response = await fetch(`/api/admin/users/${username}`, {\r\n        method: 'DELETE',\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to delete user');\r\n      }\r\n      \r\n      return response.json();\r\n    },\r\n    \r\n    // Get all users\r\n    getAllUsers: async () => {\r\n      const response = await fetch('/api/admin/users', {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to get users');\r\n      }\r\n      \r\n      return response.json();\r\n    },\r\n    \r\n    // Get user information\r\n    getUserInfo: async (username) => {\r\n      const response = await fetch(`/api/admin/users/${username}`, {\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to get user info');\r\n      }\r\n      \r\n      return response.json();\r\n    },\r\n    \r\n    // Update user password\r\n    updateUserPassword: async (username, newPassword) => {\r\n      const response = await fetch(`/api/admin/users/${username}/password`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ password: newPassword }),\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to update password');\r\n      }\r\n      \r\n      return response.json();\r\n    },\r\n    \r\n    // Update user email\r\n    updateUserEmail: async (username, newEmail) => {\r\n      const response = await fetch(`/api/admin/users/${username}/email`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ email: newEmail }),\r\n        credentials: 'include'\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to update email');\r\n      }\r\n      \r\n      return response.json();\r\n    }\r\n  };\r\n  \r\n  export default adminService;\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}