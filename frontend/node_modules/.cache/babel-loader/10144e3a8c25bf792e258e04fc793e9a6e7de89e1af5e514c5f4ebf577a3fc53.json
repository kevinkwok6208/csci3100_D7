{"ast":null,"code":"// src/services/productService.js\nconst productService = {\n  // Get all products\n  getAllProducts: async () => {\n    const response = await fetch('/api/products', {\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to get products');\n    }\n    return response.json();\n  },\n  // Get product by ID\n  getProductById: async productID => {\n    console.log('Fetching product by productID:', productID); // Debugging\n    const response = await fetch(`/api/products/${productID}`, {\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('API Error:', errorData); // Debugging\n      throw new Error(errorData.message || 'Failed to get product');\n    }\n    return response.json();\n  },\n  // Add a new product with image upload\n  addProduct: async productData => {\n    const formData = new FormData();\n\n    // Add text fields\n    formData.append('productID', productData.productID);\n    formData.append('productName', productData.productName);\n    formData.append('productDescription', productData.productDescription);\n    formData.append('productPrice', productData.productPrice);\n    formData.append('productStorage', productData.productStorage);\n\n    // Add image files\n    if (productData.productImage && productData.productImage.length > 0) {\n      productData.productImage.forEach(file => {\n        formData.append('productImages', file); // Note: using 'productImages' to match backend\n      });\n    }\n    const response = await fetch('/api/products', {\n      method: 'POST',\n      body: formData,\n      // Don't set Content-Type header - browser will set it with boundary\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to add product');\n    }\n    return response.json();\n  },\n  // Update a product with image upload\n  updateProduct: async (productID, productData) => {\n    const formData = new FormData();\n\n    // Add text fields\n    if (productData.productName) formData.append('productName', productData.productName);\n    if (productData.productDescription) formData.append('productDescription', productData.productDescription);\n    if (productData.productPrice) formData.append('productPrice', productData.productPrice);\n    if (productData.productStorage) formData.append('productStorage', productData.productStorage);\n\n    // Add image files\n    if (productData.productImage && productData.productImage.length > 0) {\n      productData.productImage.forEach(file => {\n        formData.append('productImages', file); // Note: using 'productImages' to match backend\n      });\n    }\n    const response = await fetch(`/api/products/${productID}`, {\n      method: 'PUT',\n      body: formData,\n      // Don't set Content-Type header\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update product');\n    }\n    return response.json();\n  },\n  // Update product price\n  updatePrice: async (productID, price) => {\n    const response = await fetch(`/api/products/${productID}/price`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        productPrice: price\n      }),\n      // Changed to match backend field name\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update price');\n    }\n    return response.json();\n  },\n  // Update product stock\n  updateStorage: async (productID, stock) => {\n    const response = await fetch(`/api/products/${productID}/storage`, {\n      // Changed to match backend route\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        productStorage: stock\n      }),\n      // Changed to match backend field name\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update stock');\n    }\n    return response.json();\n  },\n  // Delete a product\n  deleteProduct: async productID => {\n    const response = await fetch(`/api/products/${productID}`, {\n      method: 'DELETE',\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete product');\n    }\n    return response.json();\n  }\n};\nexport default productService;","map":{"version":3,"names":["productService","getAllProducts","response","fetch","credentials","ok","errorData","json","Error","message","getProductById","productID","console","log","error","addProduct","productData","formData","FormData","append","productName","productDescription","productPrice","productStorage","productImage","length","forEach","file","method","body","updateProduct","updatePrice","price","headers","JSON","stringify","updateStorage","stock","deleteProduct"],"sources":["/Users/kachonlai/Desktop/uni_proj/CSCI3100_Project_Demo/csci3100_D7/frontend/src/services/productService.js"],"sourcesContent":["// src/services/productService.js\r\nconst productService = {\r\n  // Get all products\r\n  getAllProducts: async () => {\r\n    const response = await fetch('/api/products', {\r\n      credentials: 'include'\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to get products');\r\n    }\r\n    \r\n    return response.json();\r\n  },\r\n  \r\n  // Get product by ID\r\n  getProductById: async (productID) => {\r\n    console.log('Fetching product by productID:', productID); // Debugging\r\n    const response = await fetch(`/api/products/${productID}`, {\r\n      credentials: 'include',\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      console.error('API Error:', errorData); // Debugging\r\n      throw new Error(errorData.message || 'Failed to get product');\r\n    }\r\n  \r\n    return response.json();\r\n  },\r\n  \r\n  // Add a new product with image upload\r\n  addProduct: async (productData) => {\r\n    const formData = new FormData();\r\n    \r\n    // Add text fields\r\n    formData.append('productID', productData.productID);\r\n    formData.append('productName', productData.productName);\r\n    formData.append('productDescription', productData.productDescription);\r\n    formData.append('productPrice', productData.productPrice);\r\n    formData.append('productStorage', productData.productStorage);\r\n    \r\n    // Add image files\r\n    if (productData.productImage && productData.productImage.length > 0) {\r\n      productData.productImage.forEach(file => {\r\n        formData.append('productImages', file); // Note: using 'productImages' to match backend\r\n      });\r\n    }\r\n    \r\n    const response = await fetch('/api/products', {\r\n      method: 'POST',\r\n      body: formData, // Don't set Content-Type header - browser will set it with boundary\r\n      credentials: 'include'\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to add product');\r\n    }\r\n    \r\n    return response.json();\r\n  },\r\n  \r\n  // Update a product with image upload\r\n  updateProduct: async (productID, productData) => {\r\n    const formData = new FormData();\r\n    \r\n    // Add text fields\r\n    if (productData.productName) formData.append('productName', productData.productName);\r\n    if (productData.productDescription) formData.append('productDescription', productData.productDescription);\r\n    if (productData.productPrice) formData.append('productPrice', productData.productPrice);\r\n    if (productData.productStorage) formData.append('productStorage', productData.productStorage);\r\n    \r\n    // Add image files\r\n    if (productData.productImage && productData.productImage.length > 0) {\r\n      productData.productImage.forEach(file => {\r\n        formData.append('productImages', file); // Note: using 'productImages' to match backend\r\n      });\r\n    }\r\n    \r\n    const response = await fetch(`/api/products/${productID}`, {\r\n      method: 'PUT',\r\n      body: formData, // Don't set Content-Type header\r\n      credentials: 'include'\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to update product');\r\n    }\r\n    \r\n    return response.json();\r\n  },\r\n  \r\n  // Update product price\r\n  updatePrice: async (productID, price) => {\r\n    const response = await fetch(`/api/products/${productID}/price`, {\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ productPrice: price }), // Changed to match backend field name\r\n      credentials: 'include'\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to update price');\r\n    }\r\n    \r\n    return response.json();\r\n  },\r\n  \r\n  // Update product stock\r\n  updateStorage: async (productID, stock) => {\r\n    const response = await fetch(`/api/products/${productID}/storage`, { // Changed to match backend route\r\n      method: 'PATCH',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ productStorage: stock }), // Changed to match backend field name\r\n      credentials: 'include'\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to update stock');\r\n    }\r\n    \r\n    return response.json();\r\n  },\r\n  \r\n  // Delete a product\r\n  deleteProduct: async (productID) => {\r\n    const response = await fetch(`/api/products/${productID}`, {\r\n      method: 'DELETE',\r\n      credentials: 'include'\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to delete product');\r\n    }\r\n    \r\n    return response.json();\r\n  }\r\n};\r\n\r\nexport default productService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}