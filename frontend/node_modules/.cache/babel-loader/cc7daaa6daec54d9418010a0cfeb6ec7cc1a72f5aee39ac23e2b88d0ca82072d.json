{"ast":null,"code":"// src/services/cartService.js\n\nconst cartService = {\n  // Add a product to the cart\n  addToCart: async (username, productId, quantity) => {\n    const response = await fetch('/api/cart/add-to-cart', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        username,\n        productId,\n        quantity\n      }),\n      credentials: 'include' // Include credentials for cookie-based authentication\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to add to cart');\n    }\n    return response.json(); // Return the updated cart data\n  },\n  // Get the user's cart\n  getCart: async username => {\n    const response = await fetch(`/api/cart/get-cart/${username}`, {\n      credentials: 'include' // Include credentials for cookie-based authentication\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to fetch cart');\n    }\n    return response.json(); // Return the cart data\n  },\n  // Remove a product from the cart\n  removeFromCart: async (username, productId) => {\n    const response = await fetch(`/api/cart/remove-from-cart/${username}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        productId\n      }),\n      // Send productId in the body\n      credentials: 'include' // Include credentials for cookie-based authentication\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to remove from cart');\n    }\n    return response.json(); // Return updated cart data\n  },\n  // Update the quantity of a product in the cart\n  updateCart: async (username, productId, quantity) => {\n    const response = await fetch(`/api/cart/update-cart/${username}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        productId,\n        quantity\n      }),\n      credentials: 'include' // Include credentials for cookie-based authentication\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update cart');\n    }\n    return response.json(); // Return updated cart data\n  }\n};\nexport default cartService;","map":{"version":3,"names":["cartService","addToCart","username","productId","quantity","response","fetch","method","headers","body","JSON","stringify","credentials","ok","errorData","json","Error","message","getCart","removeFromCart","updateCart"],"sources":["/Users/thomas/Desktop/Assignment/Year 4 sem 2/CSCI 3100/Project/merge/csci3100_D7/frontend/src/services/cartService.js"],"sourcesContent":["// src/services/cartService.js\n\nconst cartService = {\n    // Add a product to the cart\n    addToCart: async (username, productId, quantity) => {\n      const response = await fetch('/api/cart/add-to-cart', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ username, productId, quantity }),\n        credentials: 'include', // Include credentials for cookie-based authentication\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to add to cart');\n      }\n  \n      return response.json(); // Return the updated cart data\n    },\n  \n    // Get the user's cart\n    getCart: async (username) => {\n      const response = await fetch(`/api/cart/get-cart/${username}`, {\n        credentials: 'include', // Include credentials for cookie-based authentication\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to fetch cart');\n      }\n  \n      return response.json(); // Return the cart data\n    },\n  \n    // Remove a product from the cart\n    removeFromCart: async (username, productId) => {\n      const response = await fetch(`/api/cart/remove-from-cart/${username}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ productId }), // Send productId in the body\n        credentials: 'include', // Include credentials for cookie-based authentication\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to remove from cart');\n      }\n  \n      return response.json(); // Return updated cart data\n    },\n  \n    // Update the quantity of a product in the cart\n    updateCart: async (username, productId, quantity) => {\n      const response = await fetch(`/api/cart/update-cart/${username}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ productId, quantity }),\n        credentials: 'include', // Include credentials for cookie-based authentication\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Failed to update cart');\n      }\n  \n      return response.json(); // Return updated cart data\n    },\n  };\n  \n  export default cartService;\n  "],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAG;EAChB;EACAC,SAAS,EAAE,MAAAA,CAAOC,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,KAAK;IAClD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,uBAAuB,EAAE;MACpDC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAET,QAAQ;QAAEC,SAAS;QAAEC;MAAS,CAAC,CAAC;MACvDQ,WAAW,EAAE,SAAS,CAAE;IAC1B,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,uBAAuB,CAAC;IAC/D;IAEA,OAAOZ,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED;EACAG,OAAO,EAAE,MAAOhB,QAAQ,IAAK;IAC3B,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,sBAAsBJ,QAAQ,EAAE,EAAE;MAC7DU,WAAW,EAAE,SAAS,CAAE;IAC1B,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,sBAAsB,CAAC;IAC9D;IAEA,OAAOZ,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED;EACAI,cAAc,EAAE,MAAAA,CAAOjB,QAAQ,EAAEC,SAAS,KAAK;IAC7C,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8BJ,QAAQ,EAAE,EAAE;MACrEK,MAAM,EAAE,QAAQ;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER;MAAU,CAAC,CAAC;MAAE;MACrCS,WAAW,EAAE,SAAS,CAAE;IAC1B,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,4BAA4B,CAAC;IACpE;IAEA,OAAOZ,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED;EACAK,UAAU,EAAE,MAAAA,CAAOlB,QAAQ,EAAEC,SAAS,EAAEC,QAAQ,KAAK;IACnD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yBAAyBJ,QAAQ,EAAE,EAAE;MAChEK,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,SAAS;QAAEC;MAAS,CAAC,CAAC;MAC7CQ,WAAW,EAAE,SAAS,CAAE;IAC1B,CAAC,CAAC;IAEF,IAAI,CAACP,QAAQ,CAACQ,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,uBAAuB,CAAC;IAC/D;IAEA,OAAOZ,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1B;AACF,CAAC;AAED,eAAef,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}