{"ast":null,"code":"// src/services/orderService.js\nconst orderService = {\n  // Fetch all orders for a specific user\n  getOrdersByUserId: async username => {\n    const response = await fetch(`/api/orderhistories/user/${username}`, {\n      credentials: \"include\"\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Failed to fetch orders for user\");\n    }\n    return response.json(); // Return the orders for the user\n  },\n  // Fetch a specific order by order ID\n  getOrderById: async orderId => {\n    const response = await fetch(`/api/orderhistories/order/${orderId}`, {\n      credentials: \"include\"\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Failed to fetch order\");\n    }\n    return response.json(); // Return the specific order\n  },\n  // Update the status of a specific order\n  updateOrderStatus: async (orderId, status) => {\n    const response = await fetch(`/api/orderhistories/order/${orderId}/status`, {\n      method: \"PATCH\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        status\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Failed to update order status\");\n    }\n    return response.json(); // Return the updated order\n  },\n  // Fetch orders filtered by status for a specific user\n  getOrdersByStatus: async (userId, status) => {\n    const response = await fetch(`/api/orderhistories/user/${userId}/status/${status}`, {\n      credentials: \"include\"\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Failed to fetch orders by status\");\n    }\n    return response.json(); // Return the filtered orders\n  }\n};\nexport default orderService;","map":{"version":3,"names":["orderService","getOrdersByUserId","username","response","fetch","credentials","ok","errorData","json","Error","message","getOrderById","orderId","updateOrderStatus","status","method","headers","body","JSON","stringify","getOrdersByStatus","userId"],"sources":["/Users/thomas/Desktop/Assignment/Year 4 sem 2/CSCI 3100/Project/merge_1504/csci3100_D7/frontend/src/services/orderService.js"],"sourcesContent":["// src/services/orderService.js\nconst orderService = {\n  // Fetch all orders for a specific user\n  getOrdersByUserId: async (username) => {\n    const response = await fetch(`/api/orderhistories/user/${username}`, { credentials: \"include\" });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Failed to fetch orders for user\");\n    }\n    return response.json(); // Return the orders for the user\n  },\n\n  // Fetch a specific order by order ID\n  getOrderById: async (orderId) => {\n    const response = await fetch(`/api/orderhistories/order/${orderId}`, { credentials: \"include\" });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Failed to fetch order\");\n    }\n    return response.json(); // Return the specific order\n  },\n\n  // Update the status of a specific order\n  updateOrderStatus: async (orderId, status) => {\n    const response = await fetch(`/api/orderhistories/order/${orderId}/status`, {\n      method: \"PATCH\",\n      credentials: \"include\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ status }),\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Failed to update order status\");\n    }\n    return response.json(); // Return the updated order\n  },\n\n  // Fetch orders filtered by status for a specific user\n  getOrdersByStatus: async (userId, status) => {\n    const response = await fetch(`/api/orderhistories/user/${userId}/status/${status}`, { credentials: \"include\" });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Failed to fetch orders by status\");\n    }\n    return response.json(); // Return the filtered orders\n  },\n\n};\n\nexport default orderService;"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAG;EACnB;EACAC,iBAAiB,EAAE,MAAOC,QAAQ,IAAK;IACrC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4BF,QAAQ,EAAE,EAAE;MAAEG,WAAW,EAAE;IAAU,CAAC,CAAC;IAChG,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,iCAAiC,CAAC;IACzE;IACA,OAAOP,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED;EACAG,YAAY,EAAE,MAAOC,OAAO,IAAK;IAC/B,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6BQ,OAAO,EAAE,EAAE;MAAEP,WAAW,EAAE;IAAU,CAAC,CAAC;IAChG,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,uBAAuB,CAAC;IAC/D;IACA,OAAOP,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED;EACAK,iBAAiB,EAAE,MAAAA,CAAOD,OAAO,EAAEE,MAAM,KAAK;IAC5C,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6BQ,OAAO,SAAS,EAAE;MAC1EG,MAAM,EAAE,OAAO;MACfV,WAAW,EAAE,SAAS;MACtBW,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEL;MAAO,CAAC;IACjC,CAAC,CAAC;IACF,IAAI,CAACX,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,+BAA+B,CAAC;IACvE;IACA,OAAOP,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1B,CAAC;EAED;EACAY,iBAAiB,EAAE,MAAAA,CAAOC,MAAM,EAAEP,MAAM,KAAK;IAC3C,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4BiB,MAAM,WAAWP,MAAM,EAAE,EAAE;MAAET,WAAW,EAAE;IAAU,CAAC,CAAC;IAC/G,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,kCAAkC,CAAC;IAC1E;IACA,OAAOP,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;EAC1B;AAEF,CAAC;AAED,eAAeR,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}