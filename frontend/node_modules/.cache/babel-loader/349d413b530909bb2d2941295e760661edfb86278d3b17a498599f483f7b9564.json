{"ast":null,"code":"var _jsxFileName = \"/Users/kachonlai/Desktop/uni_proj/CSCI3100_Project_Demo/csci3100_D7/frontend/src/components/Order.jsx\",\n  _s = $RefreshSig$();\n// src/components/Order.jsx\nimport React, { useState, useEffect } from \"react\";\nimport orderService from \"../services/orderService\"; // Service to fetch orders\nimport productService from \"../services/productService\"; // Service to fetch orders\nimport \"./Order.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Order = username => {\n  _s();\n  const [orders, setOrders] = useState([]); // State to store orders\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n  const [allProducts, setAllProducts] = useState([]);\n  const [filterId, setFilterId] = useState(\"\"); // State for filter input\n  const [filteredOrder, setFilteredOrder] = useState(null); // State for filtered order\n  const [statusMessage, setStatusMessage] = useState(\"\"); // State for status\n  const [currentStatusFilter, setCurrentStatusFilter] = useState(\"All\"); // State for status filter\n\n  useEffect(() => {\n    const fetchOrders = async () => {\n      setLoading(true);\n      //let ordersLength = 0;\n      try {\n        //do {\n        const data = await orderService.getOrdersByUserId(username.username);\n        console.log(\"Fetched orders:\", data);\n        //console.log('ordersLength', ordersLength);\n\n        if (data && Array.isArray(data) && data.length > 0) {\n          await new Promise(resolve => {\n            setOrders(data); // Set orders\n            resolve();\n            //console.log('Orders set successfully, length:', ordersLength);\n            // console.log('datas Length', data.length);\n            // console.log('orders Length',orders.length) // Resolve immediately, as setOrders is asynchronous\n          });\n          //ordersLength = data.length;\n          //console.log('Orders set successfully, length:', ordersLength);\n          console.log('orders.length inside the loop', orders.length);\n          setError(null);\n        } else {\n          console.error(\"Fetched data is not in expected format:\", data);\n          setOrders([]);\n          //ordersLength = 0; // Reset ordersLength if data is invalid\n        }\n        //await new Promise(resolve => setTimeout(resolve, 50));\n        //} while (ordersLength === 0 || orders.length === 0 ); // Re-fetch only when ordersLength is 0\n      } catch (err) {\n        console.error(\"Error fetching orders:\", err.message);\n        setError(err.message || \"Failed to fetch orders\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (username.username) {\n      fetchOrders();\n    }\n  }, [username.username]); // Re-fetch orders when username changes\n  useEffect(() => {\n    if (orders.length === 0) {\n      console.warn('Orders array is still empty after setting.');\n      //fetchOrders();\n    } else {\n      console.log('Orders array successfully populated:', orders);\n    }\n  }, [orders]);\n  useEffect(() => {\n    const fetchProducts = async () => {\n      try {\n        const productsData = await productService.getAllProducts();\n        // console.log(\"Fetched products:\", productsData); // Debugging\n        // console.log(\"Check Products:\", productsData.products);\n\n        // Ensure productsData contains a valid products array\n        if (productsData && Array.isArray(productsData.products)) {\n          //setAllProducts(productsData.products); // Store all products\n          setAllProducts(productsData.products); // Store all products\n        } else {\n          console.error(\"Fetched productsData.products is not an array:\", productsData.products);\n          setAllProducts([]); // Fallback to empty array\n        }\n      } catch (err) {\n        console.error(\"Error fetching products:\", err.message);\n      }\n    };\n    fetchProducts();\n  }, []);\n  const handleFilter = async () => {\n    if (!filterId.trim()) {\n      setError(\"Please enter a valid Order ID.\"); // Set an error message\n      return; // Exit the function if the input is empty\n    }\n    try {\n      const order = await orderService.getOrderById(filterId);\n      if (!order) {\n        setError(\"Order not found.\"); // Set error if order is not found\n        setFilteredOrder(null); // Reset filtered order\n        return; // Exit the function\n      }\n      setFilteredOrder(order); // Set the filtered order\n      setError(null); // Reset error state\n    } catch (err) {\n      setError(err.message || \"Failed to fetch order\");\n      setFilteredOrder(null); // Reset filtered order on error\n    }\n  };\n  const handleUpdateStatus = async orderId => {\n    try {\n      const updatedOrder = await orderService.updateOrderStatus(orderId, true); // Set status to true\n\n      setOrders(prevOrders => prevOrders.map(order => order.orderId === updatedOrder.orderId ? updatedOrder : order));\n      setStatusMessage(\"Order status updated successfully!\");\n      // console.log('Order Staus:', updatedOrder.products);\n      // console.log('Order Staus:', updatedOrder.products[0].status); \n\n      // Update the filtered order if it matches the updated order\n      if (filteredOrder && filteredOrder.orderId === updatedOrder.orderId) {\n        setFilteredOrder(updatedOrder); // Update filtered order with the new status\n        setOrders(updatedOrder);\n      }\n      setStatusMessage(\"Order status updated successfully!\");\n      // console.log('Updated Order:', updatedOrder);\n      // console.log('Updated Order Order', orders);\n      //console.log('Updated Order Advanced', orders.products[0].productId._id);\n    } catch (err) {\n      setError(err.message || \"Failed to update order status\");\n      setStatusMessage(\"\"); // Clear status message on error\n    }\n  };\n  const toggleStatusFilter = () => {\n    setCurrentStatusFilter(prev => prev === \"Received\" ? \"Shipping\" : \"Received\");\n  };\n  const ErrorPopup = ({\n    message,\n    onClose\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-popup\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"popup-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 5\n    }, this);\n  };\n  const closePopup = () => {\n    setError(null); // Close the pop-up\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading orders...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 160,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"error-message\",\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 21\n  }, this);\n  if (orders.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No orders found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 35\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"order-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Order History\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleStatusFilter,\n      children: currentStatusFilter === \"Received\" ? \"Show Shipping\" : \"Show Received\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filter-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter Order ID\",\n        value: filterId,\n        onChange: e => setFilterId(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleFilter,\n        disabled: !filterId.trim(),\n        children: \"Get Order\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(ErrorPopup, {\n      message: error,\n      onClose: closePopup\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 17\n    }, this), \" \", filteredOrder ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filtered-order\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Filtered Order Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Order ID: \", filteredOrder.orderId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"User ID: \", filteredOrder.userId]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Total Price: $\", filteredOrder.totalPrice.toFixed(2)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Shipping Status: \", filteredOrder.products[0].status ? 'Received' : 'Shipping']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Order Date: \", new Date(filteredOrder.createdAt).toLocaleString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Products:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: filteredOrder.products.map((product, productIndex) => {\n          const foundProductName = product.productId.productName;\n          if (product.productId.productName === undefined) {\n            const foundProduct = allProducts.find(p => p._id === product.productId);\n            console.log(\"found product if loop\", foundProduct.productName);\n            const foundProductName = foundProduct.productName;\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"Product Name: \", foundProductName, \" - Quantity: \", product.quantity || 1, product.status === false && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"status-update\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleUpdateStatus(filteredOrder.orderId),\n                  children: \"Update Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 206,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 205,\n                columnNumber: 23\n              }, this)]\n            }, `${filteredOrder.orderId}-${productIndex}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 19\n            }, this);\n          }\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this), filteredOrder.products[0].status === false &&\n      /*#__PURE__*/\n      // Hide button when status is true\n      _jsxDEV(\"div\", {\n        className: \"status-update\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleUpdateStatus(filteredOrder.orderId),\n          children: \"Update Status\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }, this), statusMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"status-message\",\n        children: statusMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"order-list\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading orders...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 7\n      }, this) // Show loading message while fetching\n      : orders.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No orders found.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this) // Handle case when no orders are available\n      : orders.filter(order => {\n        if (currentStatusFilter === \"All\") return true; // Show all orders\n        return order.products[0].status === (currentStatusFilter === \"Received\"); // Filter by status\n      }).\n      // orders.map((order) => (\n      map(order => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"order-card\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Order ID: \", order.orderId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"User ID: \", order.userId]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Total Price: $\", order.totalPrice.toFixed(2)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Shipping Status: \", order.products[0].status ? 'Received' : 'Shipping']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Order Date: \", new Date(order.createdAt).toLocaleString()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Products:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: order.products.map((product, productIndex) => {\n            //console.log('Check Order',orders[0].products[0].productId._id);\n            console.log('Check order', product.productId.productName);\n            console.log('Check order', product);\n            const foundProductName = product.productId.productName;\n            if (product.productId.productName === undefined) {\n              const foundProduct = allProducts.find(p => p._id === product.productId);\n              console.log(\"found product if loop\", foundProduct.productName);\n              const foundProductName = foundProduct.productName;\n              return /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [\"Product Name: \", foundProductName, \" - Quantity: \", product.quantity || 1, product.status === false && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"status-update\",\n                  children: /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => handleUpdateStatus(order.orderId),\n                    children: \"Update Status\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 265,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 264,\n                  columnNumber: 23\n                }, this)]\n              }, `${order.orderId}-${productIndex}`, true, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 19\n              }, this);\n            }\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: [\"Product Name: \", foundProductName, \" - Quantity: \", product.quantity || 1, product.status === false && /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"status-update\",\n                children: /*#__PURE__*/_jsxDEV(\"button\", {\n                  onClick: () => handleUpdateStatus(order.orderId),\n                  children: \"Update Status\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 21\n              }, this)]\n            }, `${order.orderId}-${productIndex}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 13\n        }, this)]\n      }, order.orderId, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n};\n_s(Order, \"GgQmfubRSxiPWi5Oxp2vw9KYGnM=\");\n_c = Order;\nexport default Order;\nvar _c;\n$RefreshReg$(_c, \"Order\");","map":{"version":3,"names":["React","useState","useEffect","orderService","productService","jsxDEV","_jsxDEV","Order","username","_s","orders","setOrders","loading","setLoading","error","setError","allProducts","setAllProducts","filterId","setFilterId","filteredOrder","setFilteredOrder","statusMessage","setStatusMessage","currentStatusFilter","setCurrentStatusFilter","fetchOrders","data","getOrdersByUserId","console","log","Array","isArray","length","Promise","resolve","err","message","warn","fetchProducts","productsData","getAllProducts","products","handleFilter","trim","order","getOrderById","handleUpdateStatus","orderId","updatedOrder","updateOrderStatus","prevOrders","map","toggleStatusFilter","prev","ErrorPopup","onClose","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","closePopup","type","placeholder","value","onChange","e","target","disabled","userId","totalPrice","toFixed","status","Date","createdAt","toLocaleString","product","productIndex","foundProductName","productId","productName","undefined","foundProduct","find","p","_id","quantity","filter","_c","$RefreshReg$"],"sources":["/Users/kachonlai/Desktop/uni_proj/CSCI3100_Project_Demo/csci3100_D7/frontend/src/components/Order.jsx"],"sourcesContent":["// src/components/Order.jsx\nimport React, { useState, useEffect } from \"react\";\nimport orderService from \"../services/orderService\"; // Service to fetch orders\nimport productService from \"../services/productService\"; // Service to fetch orders\nimport \"./Order.css\";\n\nconst Order = (username) => {\n  const [orders, setOrders] = useState([]); // State to store orders\n  const [loading, setLoading] = useState(true); // Loading state\n  const [error, setError] = useState(null); // Error state\n  const [allProducts, setAllProducts] = useState([]);\n  const [filterId, setFilterId] = useState(\"\"); // State for filter input\n  const [filteredOrder, setFilteredOrder] = useState(null); // State for filtered order\n  const [statusMessage, setStatusMessage] = useState(\"\"); // State for status\n  const [currentStatusFilter, setCurrentStatusFilter] = useState(\"All\"); // State for status filter\n\n  useEffect(() => {\n    const fetchOrders = async () => {\n      setLoading(true);\n      //let ordersLength = 0;\n      try {\n        //do {\n          const data = await orderService.getOrdersByUserId(username.username);\n          console.log(\"Fetched orders:\", data);\n          //console.log('ordersLength', ordersLength);\n          \n          if (data && Array.isArray(data) && data.length > 0) {\n            await new Promise((resolve) => {\n              setOrders(data); // Set orders\n              resolve();\n              //console.log('Orders set successfully, length:', ordersLength);\n              // console.log('datas Length', data.length);\n              // console.log('orders Length',orders.length) // Resolve immediately, as setOrders is asynchronous\n            });\n            //ordersLength = data.length;\n            //console.log('Orders set successfully, length:', ordersLength);\n            console.log('orders.length inside the loop', orders.length);\n            setError(null);\n          } else {\n            console.error(\"Fetched data is not in expected format:\", data);\n            setOrders([]);\n            //ordersLength = 0; // Reset ordersLength if data is invalid\n          }\n          //await new Promise(resolve => setTimeout(resolve, 50));\n        //} while (ordersLength === 0 || orders.length === 0 ); // Re-fetch only when ordersLength is 0\n  \n      } catch (err) {\n        console.error(\"Error fetching orders:\", err.message);\n        setError(err.message || \"Failed to fetch orders\");\n      } finally {\n        setLoading(false);\n      }\n    };\n  \n    if (username.username) {\n      fetchOrders();\n    }\n  }, [username.username]); // Re-fetch orders when username changes\n  useEffect(() => {\n    if (orders.length === 0) {\n      console.warn('Orders array is still empty after setting.');\n      //fetchOrders();\n    } else {\n      console.log('Orders array successfully populated:', orders);\n    }\n  }, [orders]);\n\n\nuseEffect(() => {\n  const fetchProducts = async () => {\n    \n      try {\n          const productsData = await productService.getAllProducts();\n          // console.log(\"Fetched products:\", productsData); // Debugging\n          // console.log(\"Check Products:\", productsData.products);\n\n          // Ensure productsData contains a valid products array\n          if (productsData && Array.isArray(productsData.products)) {\n              //setAllProducts(productsData.products); // Store all products\n              setAllProducts(productsData.products); // Store all products\n\n          } else {\n              console.error(\"Fetched productsData.products is not an array:\", productsData.products);\n              setAllProducts([]); // Fallback to empty array\n          }\n      } catch (err) {\n          console.error(\"Error fetching products:\", err.message);\n      }\n  \n  };\n  fetchProducts();\n\n}, []);\n\nconst handleFilter = async () => {\n  if (!filterId.trim()) {\n    setError(\"Please enter a valid Order ID.\"); // Set an error message\n    return; // Exit the function if the input is empty\n  }\n  try {\n    const order = await orderService.getOrderById(filterId);\n    if (!order) {\n      setError(\"Order not found.\"); // Set error if order is not found\n      setFilteredOrder(null); // Reset filtered order\n      return; // Exit the function\n    }\n    setFilteredOrder(order); // Set the filtered order\n    setError(null); // Reset error state\n  } catch (err) {\n    setError(err.message || \"Failed to fetch order\");\n    setFilteredOrder(null); // Reset filtered order on error\n  }\n};\nconst handleUpdateStatus = async (orderId) => {\n  try {\n    const updatedOrder = await orderService.updateOrderStatus(orderId, true); // Set status to true\n    \n    setOrders((prevOrders) =>\n      prevOrders.map((order) => (order.orderId === updatedOrder.orderId ? updatedOrder : order))\n    );\n    setStatusMessage(\"Order status updated successfully!\");\n    // console.log('Order Staus:', updatedOrder.products);\n    // console.log('Order Staus:', updatedOrder.products[0].status); \n\n    // Update the filtered order if it matches the updated order\n    if (filteredOrder && filteredOrder.orderId === updatedOrder.orderId) {\n      setFilteredOrder(updatedOrder); // Update filtered order with the new status\n      setOrders(updatedOrder);\n    }\n    setStatusMessage(\"Order status updated successfully!\");\n    // console.log('Updated Order:', updatedOrder);\n    // console.log('Updated Order Order', orders);\n    //console.log('Updated Order Advanced', orders.products[0].productId._id);\n    \n  } catch (err) {\n    setError(err.message || \"Failed to update order status\");\n    setStatusMessage(\"\"); // Clear status message on error\n  }\n};\n\nconst toggleStatusFilter = () => {\n  setCurrentStatusFilter((prev) => (prev === \"Received\" ? \"Shipping\" : \"Received\"));\n};\n\nconst ErrorPopup = ({ message, onClose }) => {\n  return (\n    <div className=\"error-popup\">\n      <div className=\"popup-content\">\n        <p>{message}</p>\n        <button onClick={onClose}>Close</button>\n      </div>\n    </div>\n  );\n};\n\nconst closePopup = () => {\n  setError(null); // Close the pop-up\n};\n\n  if (loading) return <p>Loading orders...</p>;\n  if (error) return <p className=\"error-message\">{error}</p>;\n  if (orders.length === 0) return <p>No orders found</p>;\n\n  return (\n    <div className=\"order-container\">\n      <h1>Order History</h1>\n      {/* Status Filter Button */}\n      <button onClick={toggleStatusFilter}>\n        {currentStatusFilter === \"Received\" ? \"Show Shipping\" : \"Show Received\"}\n      </button>\n      {/* Filter Section */}\n      <div className=\"filter-section\">\n        <input\n          type=\"text\"\n          placeholder=\"Enter Order ID\"\n          value={filterId}\n          onChange={(e) => setFilterId(e.target.value)}\n        />\n        <button onClick={handleFilter}\n                disabled={!filterId.trim()}>Get Order</button>\n      </div>\n      {error && <ErrorPopup message={error} onClose={closePopup} />} {/* Display error pop-up */}\n      {filteredOrder ? (\n        <div className=\"filtered-order\">\n          <h2>Filtered Order Details</h2>\n          <p>Order ID: {filteredOrder.orderId}</p>\n          <p>User ID: {filteredOrder.userId}</p>\n          <p>Total Price: ${filteredOrder.totalPrice.toFixed(2)}</p>\n          <p>Shipping Status: {filteredOrder.products[0].status? 'Received' : 'Shipping'}</p>\n          <p>Order Date: {new Date(filteredOrder.createdAt).toLocaleString()}</p>\n          <h3>Products:</h3>\n          <ul>\n            {filteredOrder.products.map((product, productIndex) => {\n              const foundProductName = product.productId.productName\n\n              if (product.productId.productName === undefined) {\n                const foundProduct = allProducts.find(p => p._id === product.productId);\n                console.log(\"found product if loop\",foundProduct.productName );\n                const foundProductName = foundProduct.productName\n                return (\n                  <li key={`${filteredOrder.orderId}-${productIndex}`}>\n                    Product Name: {foundProductName} - Quantity: {product.quantity || 1}\n                    {/* Show button for each product if the order status is false   .products[0].productId.productName */}\n                    {product.status === false && (\n                      <div className=\"status-update\">\n                        <button onClick={() => handleUpdateStatus(filteredOrder.orderId)}>Update Status</button>\n                      </div>\n                    )}\n                  </li>\n                );\n\n              }\n              \n            })}\n          </ul>\n          {filteredOrder.products[0].status === false && ( // Hide button when status is true\n            <div className=\"status-update\">\n              <button onClick={() => handleUpdateStatus(filteredOrder.orderId)}>Update Status</button>\n            </div>\n          )}\n          \n          {statusMessage && <p className=\"status-message\">{statusMessage}</p>}\n        </div>\n      ) : (\n      <div className=\"order-list\">\n        {loading ? (\n      <p>Loading orders...</p> // Show loading message while fetching\n    ) : (\n      orders.length === 0 ? (\n        <p>No orders found.</p> // Handle case when no orders are available\n      ) : (\n        orders.filter(order => {\n          if (currentStatusFilter === \"All\") return true; // Show all orders\n          return order.products[0].status === (currentStatusFilter === \"Received\"); // Filter by status\n        }).\n        // orders.map((order) => (\n          map((order) => (\n          <div key={order.orderId} className=\"order-card\">\n            {/* Order details */}\n            <h2>Order ID: {order.orderId}</h2>\n            <p>User ID: {order.userId}</p>\n            <p>Total Price: ${order.totalPrice.toFixed(2)}</p>\n            <p>Shipping Status: {order.products[0].status ? 'Received' : 'Shipping'}</p>\n            <p>Order Date: {new Date(order.createdAt).toLocaleString()}</p>\n\n            {/* List of products */}\n            <h3>Products:</h3>\n            <ul>  \n            {order.products.map((product, productIndex) => {  \n              //console.log('Check Order',orders[0].products[0].productId._id);\n              console.log('Check order',product.productId.productName);\n              console.log('Check order',product);\n              const foundProductName = product.productId.productName\n\n              if (product.productId.productName === undefined) {\n                const foundProduct = allProducts.find(p => p._id === product.productId);\n                console.log(\"found product if loop\",foundProduct.productName );\n                const foundProductName = foundProduct.productName\n                return (\n                  <li key={`${order.orderId}-${productIndex}`}>\n                    Product Name: {foundProductName} - Quantity: {product.quantity || 1}\n                    {/* Show button for each product if the order status is false   .products[0].productId.productName */}\n                    {product.status === false && (\n                      <div className=\"status-update\">\n                        <button onClick={() => handleUpdateStatus(order.orderId)}>Update Status</button>\n                      </div>\n                    )}\n                  </li>\n                );\n\n              }\n              \n              return (\n                <li key={`${order.orderId}-${productIndex}`}>\n                  Product Name: {foundProductName} - Quantity: {product.quantity || 1}\n                  {/* Show button for each product if the order status is false   .products[0].productId.productName */}\n                  {product.status === false && (\n                    <div className=\"status-update\">\n                      <button onClick={() => handleUpdateStatus(order.orderId)}>Update Status</button>\n                    </div>\n                  )}\n                </li>\n              );\n        })}\n            </ul>\n          </div>\n        ))))}\n      </div>\n      )}\n    </div>\n  );\n}\n\nexport default Order;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,0BAA0B,CAAC,CAAC;AACrD,OAAOC,cAAc,MAAM,4BAA4B,CAAC,CAAC;AACzD,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,KAAK,GAAIC,QAAQ,IAAK;EAAAC,EAAA;EAC1B,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACa,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1C,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,EAAE,CAAC;EAClD,MAAM,CAACiB,QAAQ,EAAEC,WAAW,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACqB,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EACxD,MAAM,CAACuB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAEvEC,SAAS,CAAC,MAAM;IACd,MAAMwB,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9Bb,UAAU,CAAC,IAAI,CAAC;MAChB;MACA,IAAI;QACF;QACE,MAAMc,IAAI,GAAG,MAAMxB,YAAY,CAACyB,iBAAiB,CAACpB,QAAQ,CAACA,QAAQ,CAAC;QACpEqB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEH,IAAI,CAAC;QACpC;;QAEA,IAAIA,IAAI,IAAII,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,IAAIA,IAAI,CAACM,MAAM,GAAG,CAAC,EAAE;UAClD,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAK;YAC7BxB,SAAS,CAACgB,IAAI,CAAC,CAAC,CAAC;YACjBQ,OAAO,CAAC,CAAC;YACT;YACA;YACA;UACF,CAAC,CAAC;UACF;UACA;UACAN,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEpB,MAAM,CAACuB,MAAM,CAAC;UAC3DlB,QAAQ,CAAC,IAAI,CAAC;QAChB,CAAC,MAAM;UACLc,OAAO,CAACf,KAAK,CAAC,yCAAyC,EAAEa,IAAI,CAAC;UAC9DhB,SAAS,CAAC,EAAE,CAAC;UACb;QACF;QACA;QACF;MAEF,CAAC,CAAC,OAAOyB,GAAG,EAAE;QACZP,OAAO,CAACf,KAAK,CAAC,wBAAwB,EAAEsB,GAAG,CAACC,OAAO,CAAC;QACpDtB,QAAQ,CAACqB,GAAG,CAACC,OAAO,IAAI,wBAAwB,CAAC;MACnD,CAAC,SAAS;QACRxB,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAED,IAAIL,QAAQ,CAACA,QAAQ,EAAE;MACrBkB,WAAW,CAAC,CAAC;IACf;EACF,CAAC,EAAE,CAAClB,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,CAAC;EACzBN,SAAS,CAAC,MAAM;IACd,IAAIQ,MAAM,CAACuB,MAAM,KAAK,CAAC,EAAE;MACvBJ,OAAO,CAACS,IAAI,CAAC,4CAA4C,CAAC;MAC1D;IACF,CAAC,MAAM;MACLT,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEpB,MAAM,CAAC;IAC7D;EACF,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAGdR,SAAS,CAAC,MAAM;IACd,MAAMqC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAE9B,IAAI;QACA,MAAMC,YAAY,GAAG,MAAMpC,cAAc,CAACqC,cAAc,CAAC,CAAC;QAC1D;QACA;;QAEA;QACA,IAAID,YAAY,IAAIT,KAAK,CAACC,OAAO,CAACQ,YAAY,CAACE,QAAQ,CAAC,EAAE;UACtD;UACAzB,cAAc,CAACuB,YAAY,CAACE,QAAQ,CAAC,CAAC,CAAC;QAE3C,CAAC,MAAM;UACHb,OAAO,CAACf,KAAK,CAAC,gDAAgD,EAAE0B,YAAY,CAACE,QAAQ,CAAC;UACtFzB,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC;QACxB;MACJ,CAAC,CAAC,OAAOmB,GAAG,EAAE;QACVP,OAAO,CAACf,KAAK,CAAC,0BAA0B,EAAEsB,GAAG,CAACC,OAAO,CAAC;MAC1D;IAEJ,CAAC;IACDE,aAAa,CAAC,CAAC;EAEjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMI,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI,CAACzB,QAAQ,CAAC0B,IAAI,CAAC,CAAC,EAAE;MACpB7B,QAAQ,CAAC,gCAAgC,CAAC,CAAC,CAAC;MAC5C,OAAO,CAAC;IACV;IACA,IAAI;MACF,MAAM8B,KAAK,GAAG,MAAM1C,YAAY,CAAC2C,YAAY,CAAC5B,QAAQ,CAAC;MACvD,IAAI,CAAC2B,KAAK,EAAE;QACV9B,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAC9BM,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;QACxB,OAAO,CAAC;MACV;MACAA,gBAAgB,CAACwB,KAAK,CAAC,CAAC,CAAC;MACzB9B,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IAClB,CAAC,CAAC,OAAOqB,GAAG,EAAE;MACZrB,QAAQ,CAACqB,GAAG,CAACC,OAAO,IAAI,uBAAuB,CAAC;MAChDhB,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC1B;EACF,CAAC;EACD,MAAM0B,kBAAkB,GAAG,MAAOC,OAAO,IAAK;IAC5C,IAAI;MACF,MAAMC,YAAY,GAAG,MAAM9C,YAAY,CAAC+C,iBAAiB,CAACF,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;;MAE1ErC,SAAS,CAAEwC,UAAU,IACnBA,UAAU,CAACC,GAAG,CAAEP,KAAK,IAAMA,KAAK,CAACG,OAAO,KAAKC,YAAY,CAACD,OAAO,GAAGC,YAAY,GAAGJ,KAAM,CAC3F,CAAC;MACDtB,gBAAgB,CAAC,oCAAoC,CAAC;MACtD;MACA;;MAEA;MACA,IAAIH,aAAa,IAAIA,aAAa,CAAC4B,OAAO,KAAKC,YAAY,CAACD,OAAO,EAAE;QACnE3B,gBAAgB,CAAC4B,YAAY,CAAC,CAAC,CAAC;QAChCtC,SAAS,CAACsC,YAAY,CAAC;MACzB;MACA1B,gBAAgB,CAAC,oCAAoC,CAAC;MACtD;MACA;MACA;IAEF,CAAC,CAAC,OAAOa,GAAG,EAAE;MACZrB,QAAQ,CAACqB,GAAG,CAACC,OAAO,IAAI,+BAA+B,CAAC;MACxDd,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC;IACxB;EACF,CAAC;EAED,MAAM8B,kBAAkB,GAAGA,CAAA,KAAM;IAC/B5B,sBAAsB,CAAE6B,IAAI,IAAMA,IAAI,KAAK,UAAU,GAAG,UAAU,GAAG,UAAW,CAAC;EACnF,CAAC;EAED,MAAMC,UAAU,GAAGA,CAAC;IAAElB,OAAO;IAAEmB;EAAQ,CAAC,KAAK;IAC3C,oBACElD,OAAA;MAAKmD,SAAS,EAAC,aAAa;MAAAC,QAAA,eAC1BpD,OAAA;QAAKmD,SAAS,EAAC,eAAe;QAAAC,QAAA,gBAC5BpD,OAAA;UAAAoD,QAAA,EAAIrB;QAAO;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAChBxD,OAAA;UAAQyD,OAAO,EAAEP,OAAQ;UAAAE,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAEV,CAAC;EAED,MAAME,UAAU,GAAGA,CAAA,KAAM;IACvBjD,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAClB,CAAC;EAEC,IAAIH,OAAO,EAAE,oBAAON,OAAA;IAAAoD,QAAA,EAAG;EAAiB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAC5C,IAAIhD,KAAK,EAAE,oBAAOR,OAAA;IAAGmD,SAAS,EAAC,eAAe;IAAAC,QAAA,EAAE5C;EAAK;IAAA6C,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAI,CAAC;EAC1D,IAAIpD,MAAM,CAACuB,MAAM,KAAK,CAAC,EAAE,oBAAO3B,OAAA;IAAAoD,QAAA,EAAG;EAAe;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;EAEtD,oBACExD,OAAA;IAAKmD,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC9BpD,OAAA;MAAAoD,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAEtBxD,OAAA;MAAQyD,OAAO,EAAEV,kBAAmB;MAAAK,QAAA,EACjClC,mBAAmB,KAAK,UAAU,GAAG,eAAe,GAAG;IAAe;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjE,CAAC,eAETxD,OAAA;MAAKmD,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BpD,OAAA;QACE2D,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,gBAAgB;QAC5BC,KAAK,EAAEjD,QAAS;QAChBkD,QAAQ,EAAGC,CAAC,IAAKlD,WAAW,CAACkD,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC9C,CAAC,eACFxD,OAAA;QAAQyD,OAAO,EAAEpB,YAAa;QACtB4B,QAAQ,EAAE,CAACrD,QAAQ,CAAC0B,IAAI,CAAC,CAAE;QAAAc,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC,EACLhD,KAAK,iBAAIR,OAAA,CAACiD,UAAU;MAAClB,OAAO,EAAEvB,KAAM;MAAC0C,OAAO,EAAEQ;IAAW;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAAC,GAAC,EAC9D1C,aAAa,gBACZd,OAAA;MAAKmD,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BpD,OAAA;QAAAoD,QAAA,EAAI;MAAsB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC/BxD,OAAA;QAAAoD,QAAA,GAAG,YAAU,EAACtC,aAAa,CAAC4B,OAAO;MAAA;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACxCxD,OAAA;QAAAoD,QAAA,GAAG,WAAS,EAACtC,aAAa,CAACoD,MAAM;MAAA;QAAAb,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACtCxD,OAAA;QAAAoD,QAAA,GAAG,gBAAc,EAACtC,aAAa,CAACqD,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC;MAAA;QAAAf,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1DxD,OAAA;QAAAoD,QAAA,GAAG,mBAAiB,EAACtC,aAAa,CAACsB,QAAQ,CAAC,CAAC,CAAC,CAACiC,MAAM,GAAE,UAAU,GAAG,UAAU;MAAA;QAAAhB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACnFxD,OAAA;QAAAoD,QAAA,GAAG,cAAY,EAAC,IAAIkB,IAAI,CAACxD,aAAa,CAACyD,SAAS,CAAC,CAACC,cAAc,CAAC,CAAC;MAAA;QAAAnB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACvExD,OAAA;QAAAoD,QAAA,EAAI;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAClBxD,OAAA;QAAAoD,QAAA,EACGtC,aAAa,CAACsB,QAAQ,CAACU,GAAG,CAAC,CAAC2B,OAAO,EAAEC,YAAY,KAAK;UACrD,MAAMC,gBAAgB,GAAGF,OAAO,CAACG,SAAS,CAACC,WAAW;UAEtD,IAAIJ,OAAO,CAACG,SAAS,CAACC,WAAW,KAAKC,SAAS,EAAE;YAC/C,MAAMC,YAAY,GAAGrE,WAAW,CAACsE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKT,OAAO,CAACG,SAAS,CAAC;YACvErD,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAACuD,YAAY,CAACF,WAAY,CAAC;YAC9D,MAAMF,gBAAgB,GAAGI,YAAY,CAACF,WAAW;YACjD,oBACE7E,OAAA;cAAAoD,QAAA,GAAqD,gBACrC,EAACuB,gBAAgB,EAAC,eAAa,EAACF,OAAO,CAACU,QAAQ,IAAI,CAAC,EAElEV,OAAO,CAACJ,MAAM,KAAK,KAAK,iBACvBrE,OAAA;gBAAKmD,SAAS,EAAC,eAAe;gBAAAC,QAAA,eAC5BpD,OAAA;kBAAQyD,OAAO,EAAEA,CAAA,KAAMhB,kBAAkB,CAAC3B,aAAa,CAAC4B,OAAO,CAAE;kBAAAU,QAAA,EAAC;gBAAa;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACrF,CACN;YAAA,GAPM,GAAG1C,aAAa,CAAC4B,OAAO,IAAIgC,YAAY,EAAE;cAAArB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAQ/C,CAAC;UAGT;QAEF,CAAC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC,EACJ1C,aAAa,CAACsB,QAAQ,CAAC,CAAC,CAAC,CAACiC,MAAM,KAAK,KAAK;MAAA;MAAM;MAC/CrE,OAAA;QAAKmD,SAAS,EAAC,eAAe;QAAAC,QAAA,eAC5BpD,OAAA;UAAQyD,OAAO,EAAEA,CAAA,KAAMhB,kBAAkB,CAAC3B,aAAa,CAAC4B,OAAO,CAAE;UAAAU,QAAA,EAAC;QAAa;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrF,CACN,EAEAxC,aAAa,iBAAIhB,OAAA;QAAGmD,SAAS,EAAC,gBAAgB;QAAAC,QAAA,EAAEpC;MAAa;QAAAqC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChE,CAAC,gBAERxD,OAAA;MAAKmD,SAAS,EAAC,YAAY;MAAAC,QAAA,EACxB9C,OAAO,gBACVN,OAAA;QAAAoD,QAAA,EAAG;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,CAAC;MAAA,EAEzBpD,MAAM,CAACuB,MAAM,KAAK,CAAC,gBACjB3B,OAAA;QAAAoD,QAAA,EAAG;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,CAAC;MAAA,EAExBpD,MAAM,CAACgF,MAAM,CAAC7C,KAAK,IAAI;QACrB,IAAIrB,mBAAmB,KAAK,KAAK,EAAE,OAAO,IAAI,CAAC,CAAC;QAChD,OAAOqB,KAAK,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACiC,MAAM,MAAMnD,mBAAmB,KAAK,UAAU,CAAC,CAAC,CAAC;MAC5E,CAAC,CAAC;MACF;MACE4B,GAAG,CAAEP,KAAK,iBACVvC,OAAA;QAAyBmD,SAAS,EAAC,YAAY;QAAAC,QAAA,gBAE7CpD,OAAA;UAAAoD,QAAA,GAAI,YAAU,EAACb,KAAK,CAACG,OAAO;QAAA;UAAAW,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAClCxD,OAAA;UAAAoD,QAAA,GAAG,WAAS,EAACb,KAAK,CAAC2B,MAAM;QAAA;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC9BxD,OAAA;UAAAoD,QAAA,GAAG,gBAAc,EAACb,KAAK,CAAC4B,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC;QAAA;UAAAf,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClDxD,OAAA;UAAAoD,QAAA,GAAG,mBAAiB,EAACb,KAAK,CAACH,QAAQ,CAAC,CAAC,CAAC,CAACiC,MAAM,GAAG,UAAU,GAAG,UAAU;QAAA;UAAAhB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5ExD,OAAA;UAAAoD,QAAA,GAAG,cAAY,EAAC,IAAIkB,IAAI,CAAC/B,KAAK,CAACgC,SAAS,CAAC,CAACC,cAAc,CAAC,CAAC;QAAA;UAAAnB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAG/DxD,OAAA;UAAAoD,QAAA,EAAI;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClBxD,OAAA;UAAAoD,QAAA,EACCb,KAAK,CAACH,QAAQ,CAACU,GAAG,CAAC,CAAC2B,OAAO,EAAEC,YAAY,KAAK;YAC7C;YACAnD,OAAO,CAACC,GAAG,CAAC,aAAa,EAACiD,OAAO,CAACG,SAAS,CAACC,WAAW,CAAC;YACxDtD,OAAO,CAACC,GAAG,CAAC,aAAa,EAACiD,OAAO,CAAC;YAClC,MAAME,gBAAgB,GAAGF,OAAO,CAACG,SAAS,CAACC,WAAW;YAEtD,IAAIJ,OAAO,CAACG,SAAS,CAACC,WAAW,KAAKC,SAAS,EAAE;cAC/C,MAAMC,YAAY,GAAGrE,WAAW,CAACsE,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKT,OAAO,CAACG,SAAS,CAAC;cACvErD,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAACuD,YAAY,CAACF,WAAY,CAAC;cAC9D,MAAMF,gBAAgB,GAAGI,YAAY,CAACF,WAAW;cACjD,oBACE7E,OAAA;gBAAAoD,QAAA,GAA6C,gBAC7B,EAACuB,gBAAgB,EAAC,eAAa,EAACF,OAAO,CAACU,QAAQ,IAAI,CAAC,EAElEV,OAAO,CAACJ,MAAM,KAAK,KAAK,iBACvBrE,OAAA;kBAAKmD,SAAS,EAAC,eAAe;kBAAAC,QAAA,eAC5BpD,OAAA;oBAAQyD,OAAO,EAAEA,CAAA,KAAMhB,kBAAkB,CAACF,KAAK,CAACG,OAAO,CAAE;oBAAAU,QAAA,EAAC;kBAAa;oBAAAC,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAQ;gBAAC;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAC7E,CACN;cAAA,GAPM,GAAGjB,KAAK,CAACG,OAAO,IAAIgC,YAAY,EAAE;gBAAArB,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAQvC,CAAC;YAGT;YAEA,oBACExD,OAAA;cAAAoD,QAAA,GAA6C,gBAC7B,EAACuB,gBAAgB,EAAC,eAAa,EAACF,OAAO,CAACU,QAAQ,IAAI,CAAC,EAElEV,OAAO,CAACJ,MAAM,KAAK,KAAK,iBACvBrE,OAAA;gBAAKmD,SAAS,EAAC,eAAe;gBAAAC,QAAA,eAC5BpD,OAAA;kBAAQyD,OAAO,EAAEA,CAAA,KAAMhB,kBAAkB,CAACF,KAAK,CAACG,OAAO,CAAE;kBAAAU,QAAA,EAAC;gBAAa;kBAAAC,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAQ;cAAC;gBAAAH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAC7E,CACN;YAAA,GAPM,GAAGjB,KAAK,CAACG,OAAO,IAAIgC,YAAY,EAAE;cAAArB,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAQvC,CAAC;UAEb,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACM,CAAC;MAAA,GA/CGjB,KAAK,CAACG,OAAO;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAgDlB,CACN;IAAG;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CACJ;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAArD,EAAA,CA7RKF,KAAK;AAAAoF,EAAA,GAALpF,KAAK;AA+RX,eAAeA,KAAK;AAAC,IAAAoF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}