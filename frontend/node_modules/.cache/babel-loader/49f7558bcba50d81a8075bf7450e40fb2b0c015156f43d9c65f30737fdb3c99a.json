{"ast":null,"code":"const adminService = {\n  // Create a new user\n  createUser: async (username, password, email, isAdmin) => {\n    const response = await fetch(`api/admin-user/create-users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        username,\n        password,\n        email,\n        isadmin: isAdmin\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to create user');\n    }\n    return response.json(); // Return the created user data\n  },\n  // Delete a user\n  deleteUser: async username => {\n    const response = await fetch(`api/admin-user/delete-users/${username}`, {\n      method: 'POST',\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete user');\n    }\n    return response.json(); // Return the result of the deletion\n  },\n  // Get all users\n  getAllUsers: async () => {\n    const response = await fetch(`api/admin-user/get-allusers`, {\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to fetch users');\n    }\n    return response.json(); // Return the list of users\n  },\n  // Get user info by username\n  getUserInfo: async username => {\n    const response = await fetch(`api/admin-user/get-userinfo/${username}`, {\n      credentials: 'include'\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to fetch user info');\n    }\n    return response.json(); // Return the user info\n  },\n  // Update user password\n  updateUserPassword: async (username, newPassword) => {\n    const response = await fetch(`api/admin-user/update-userpassword/${username}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        newPassword\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update user password');\n    }\n    return response.json(); // Return the result of the update\n  },\n  // Update user email\n  updateUserEmail: async (username, newEmail) => {\n    const response = await fetch(`api/admin-user/update-useremail/${username}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include',\n      body: JSON.stringify({\n        newEmail\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update user email');\n    }\n    return response.json(); // Return the result of the update\n  }\n};\nexport default adminService;","map":{"version":3,"names":["adminService","createUser","username","password","email","isAdmin","response","fetch","method","headers","credentials","body","JSON","stringify","isadmin","ok","errorData","json","Error","message","deleteUser","getAllUsers","getUserInfo","updateUserPassword","newPassword","updateUserEmail","newEmail"],"sources":["/Users/thomas/Desktop/Assignment/Year 4 sem 2/CSCI 3100/Project/merge/csci3100_D7/frontend/src/services/adminService.js"],"sourcesContent":["const adminService = {\r\n  // Create a new user\r\n  createUser: async (username, password, email, isAdmin) => {\r\n    const response = await fetch(`api/admin-user/create-users`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      credentials: 'include',\r\n      body: JSON.stringify({ username, password, email, isadmin: isAdmin }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to create user');\r\n    }\r\n\r\n    return response.json(); // Return the created user data\r\n  },\r\n\r\n  // Delete a user\r\n  deleteUser: async (username) => {\r\n    const response = await fetch(`api/admin-user/delete-users/${username}`, {\r\n      method: 'POST',\r\n      credentials: 'include',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to delete user');\r\n    }\r\n\r\n    return response.json(); // Return the result of the deletion\r\n  },\r\n\r\n  // Get all users\r\n  getAllUsers: async () => {\r\n    const response = await fetch(`api/admin-user/get-allusers`, {\r\n      credentials: 'include',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to fetch users');\r\n    }\r\n\r\n    return response.json(); // Return the list of users\r\n  },\r\n\r\n  // Get user info by username\r\n  getUserInfo: async (username) => {\r\n    const response = await fetch(`api/admin-user/get-userinfo/${username}`, {\r\n      credentials: 'include',\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to fetch user info');\r\n    }\r\n\r\n    return response.json(); // Return the user info\r\n  },\r\n\r\n  // Update user password\r\n  updateUserPassword: async (username, newPassword) => {\r\n    const response = await fetch(`api/admin-user/update-userpassword/${username}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      credentials: 'include',\r\n      body: JSON.stringify({ newPassword }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to update user password');\r\n    }\r\n\r\n    return response.json(); // Return the result of the update\r\n  },\r\n\r\n  // Update user email\r\n  updateUserEmail: async (username, newEmail) => {\r\n    const response = await fetch(`api/admin-user/update-useremail/${username}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      credentials: 'include',\r\n      body: JSON.stringify({ newEmail }),\r\n    });\r\n\r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || 'Failed to update user email');\r\n    }\r\n\r\n    return response.json(); // Return the result of the update\r\n  },\r\n};\r\n\r\nexport default adminService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}