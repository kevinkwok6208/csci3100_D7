{"ast":null,"code":"// src/services/authService.js\n\n// Use relative URL since proxy is configured in package.json\nconst API_BASE_URL = '/api/auth';\nconst authService = {\n  // Login function\n  async login(usernameOrEmail, password) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/login`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          usernameOrEmail,\n          password\n        }),\n        credentials: 'include'\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Login failed');\n      }\n      return {\n        username: data.username,\n        isadmin: data.isadmin,\n        token: data.token\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  },\n  // Register function\n  async register(username, email, password) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/register`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Registration failed');\n      }\n      return data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw error;\n    }\n  },\n  // Logout function\n  async logout() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/logout`, {\n        method: 'POST',\n        credentials: 'include'\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Logout failed');\n      }\n      return data;\n    } catch (error) {\n      console.error('Logout error:', error);\n      throw error;\n    }\n  },\n  // Check authentication status\n  async checkAuth() {\n    try {\n      const response = await fetch(\"/api/auth/check-auth\", {\n        credentials: \"include\"\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || \"Failed to check authentication status\");\n      }\n      return data;\n    } catch (error) {\n      console.error(\"Auth check error:\", error);\n      throw error;\n    }\n  },\n  async verifyEmail(usernameOrEmail, otp) {\n    try {\n      if (!usernameOrEmail || !otp) {\n        throw new Error('Username/Email and OTP are required');\n      }\n      const response = await fetch(`${API_BASE_URL}/verify-email`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          usernameOrEmail,\n          otp\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'OTP verification failed');\n      }\n      return data;\n    } catch (error) {\n      console.error('OTP Verification error:', error);\n      throw error;\n    }\n  },\n  async resendEmailOTP(email) {\n    const response = await fetch(`${API_BASE_URL}/resend-email-otp`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        usernameOrEmail: email\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || \"Failed to resend OTP\");\n    }\n    return response.json();\n  },\n  async requestPasswordResetOTP(usernameOrEmail) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/password-update-otp`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          usernameOrEmail\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to request OTP\");\n      }\n      return response.json();\n    } catch (error) {\n      console.error(\"Request OTP error:\", error);\n      throw error;\n    }\n  },\n  async resetPassword(usernameOrEmail, otp, newPassword) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/reset-password`, {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          usernameOrEmail,\n          otp,\n          newPassword\n        })\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"Failed to reset password\");\n      }\n      return response.json();\n    } catch (error) {\n      console.error(\"Reset Password error:\", error);\n      throw error;\n    }\n  }\n};\nexport default authService;","map":{"version":3,"names":["API_BASE_URL","authService","login","usernameOrEmail","password","response","fetch","method","headers","body","JSON","stringify","credentials","data","json","ok","Error","message","username","isadmin","token","error","console","register","email","logout","checkAuth","verifyEmail","otp","resendEmailOTP","errorData","requestPasswordResetOTP","resetPassword","newPassword"],"sources":["/Users/kachonlai/Desktop/uni_proj/CSCI3100_Project_Demo/csci3100_D7/frontend/src/services/authService.js"],"sourcesContent":["// src/services/authService.js\r\n\r\n// Use relative URL since proxy is configured in package.json\r\nconst API_BASE_URL = '/api/auth';\r\n\r\nconst authService = {\r\n  // Login function\r\n  async login(usernameOrEmail, password) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/login`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ usernameOrEmail, password }),\r\n        credentials: 'include',\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Login failed');\r\n      }\r\n\r\n      return {\r\n        username: data.username,\r\n        isadmin: data.isadmin,\r\n        token: data.token,\r\n      };\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Register function\r\n  async register(username, email, password) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/register`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, email, password }),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Registration failed');\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Logout function\r\n  async logout() {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/logout`, {\r\n        method: 'POST',\r\n        credentials: 'include'\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Logout failed');\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Check authentication status\r\n  async checkAuth() {\r\n    try {\r\n      const response = await fetch(\"/api/auth/check-auth\", {\r\n        credentials: \"include\",\r\n      });\r\n  \r\n      const data = await response.json();\r\n  \r\n      if (!response.ok) {\r\n        throw new Error(data.message || \"Failed to check authentication status\");\r\n      }\r\n  \r\n      return data;\r\n    } catch (error) {\r\n      console.error(\"Auth check error:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async verifyEmail(usernameOrEmail, otp) {\r\n    try {\r\n      if (!usernameOrEmail || !otp) {\r\n        throw new Error('Username/Email and OTP are required');\r\n      }\r\n\r\n      const response = await fetch(`${API_BASE_URL}/verify-email`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ usernameOrEmail, otp }),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'OTP verification failed');\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('OTP Verification error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async resendEmailOTP(email) {\r\n    const response = await fetch(`${API_BASE_URL}/resend-email-otp`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ usernameOrEmail: email }),\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      const errorData = await response.json();\r\n      throw new Error(errorData.message || \"Failed to resend OTP\");\r\n    }\r\n  \r\n    return response.json();\r\n  },\r\n\r\n  async requestPasswordResetOTP(usernameOrEmail) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/password-update-otp`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ usernameOrEmail }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || \"Failed to request OTP\");\r\n      }\r\n  \r\n      return response.json();\r\n    } catch (error) {\r\n      console.error(\"Request OTP error:\", error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  async resetPassword(usernameOrEmail, otp, newPassword) {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/reset-password`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ usernameOrEmail, otp, newPassword }),\r\n      });\r\n  \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || \"Failed to reset password\");\r\n      }\r\n  \r\n      return response.json();\r\n    } catch (error) {\r\n      console.error(\"Reset Password error:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default authService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}