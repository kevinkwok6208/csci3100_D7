{"ast":null,"code":"// src/services/reviewService.js\n\nconst reviewService = {\n  // Get all reviews for a specific product\n  getProductReviews: async productID => {\n    const response = await fetch(`/api/reviews/products/${productID}`, {\n      credentials: 'include' // Include credentials for cookie-based authentication\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to get product reviews');\n    }\n    return response.json(); // Return the reviews data\n  },\n  // Add a review for a specific product\n  addProductReview: async (productID, reviewData) => {\n    const response = await fetch(`/api/reviews/products/${productID}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(reviewData),\n      // Send review data in the body\n      credentials: 'include' // Include credentials for cookie-based authentication\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to add product review');\n    }\n    return response.json(); // Return the added review data\n  },\n  // Update a specific review\n  updateReview: async (reviewId, reviewData) => {\n    const response = await fetch(`/api/reviews/${reviewId}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(reviewData),\n      // Send updated review data in the body\n      credentials: 'include' // Include credentials for cookie-based authentication\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to update review');\n    }\n    return response.json(); // Return the updated review data\n  },\n  // Delete a specific review\n  deleteReview: async reviewId => {\n    const response = await fetch(`/api/reviews/${reviewId}`, {\n      method: 'DELETE',\n      credentials: 'include' // Include credentials for cookie-based authentication\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Failed to delete review');\n    }\n    return response.json(); // Return confirmation of deletion\n  }\n};\nexport default reviewService;","map":{"version":3,"names":["reviewService","getProductReviews","productID","response","fetch","credentials","ok","errorData","json","Error","message","addProductReview","reviewData","method","headers","body","JSON","stringify","updateReview","reviewId","deleteReview"],"sources":["/Users/thomas/Desktop/Assignment/Year 4 sem 2/CSCI 3100/Project/merge/csci3100_D7/frontend/src/services/reviewService.js"],"sourcesContent":["// src/services/reviewService.js\n\nconst reviewService = {\n    // Get all reviews for a specific product\n    getProductReviews: async (productID) => {\n        const response = await fetch(`/api/reviews/products/${productID}`, {\n            credentials: 'include', // Include credentials for cookie-based authentication\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Failed to get product reviews');\n        }\n\n        return response.json(); // Return the reviews data\n    },\n\n    // Add a review for a specific product\n    addProductReview: async (productID, reviewData) => {\n        const response = await fetch(`/api/reviews/products/${productID}`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(reviewData), // Send review data in the body\n            credentials: 'include', // Include credentials for cookie-based authentication\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Failed to add product review');\n        }\n\n        return response.json(); // Return the added review data\n    },\n\n    // Update a specific review\n    updateReview: async (reviewId, reviewData) => {\n        const response = await fetch(`/api/reviews/${reviewId}`, {\n            method: 'PUT',\n            headers: {\n                'Content-Type': 'application/json',\n            },\n            body: JSON.stringify(reviewData), // Send updated review data in the body\n            credentials: 'include', // Include credentials for cookie-based authentication\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Failed to update review');\n        }\n\n        return response.json(); // Return the updated review data\n    },\n\n    // Delete a specific review\n    deleteReview: async (reviewId) => {\n        const response = await fetch(`/api/reviews/${reviewId}`, {\n            method: 'DELETE',\n            credentials: 'include', // Include credentials for cookie-based authentication\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            throw new Error(errorData.message || 'Failed to delete review');\n        }\n\n        return response.json(); // Return confirmation of deletion\n    },\n};\n\nexport default reviewService;\n"],"mappings":"AAAA;;AAEA,MAAMA,aAAa,GAAG;EAClB;EACAC,iBAAiB,EAAE,MAAOC,SAAS,IAAK;IACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,yBAAyBF,SAAS,EAAE,EAAE;MAC/DG,WAAW,EAAE,SAAS,CAAE;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,+BAA+B,CAAC;IACzE;IAEA,OAAOP,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC;EAED;EACAG,gBAAgB,EAAE,MAAAA,CAAOT,SAAS,EAAEU,UAAU,KAAK;IAC/C,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,yBAAyBF,SAAS,EAAE,EAAE;MAC/DW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,UAAU,CAAC;MAAE;MAClCP,WAAW,EAAE,SAAS,CAAE;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,8BAA8B,CAAC;IACxE;IAEA,OAAOP,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC;EAED;EACAU,YAAY,EAAE,MAAAA,CAAOC,QAAQ,EAAEP,UAAU,KAAK;IAC1C,MAAMT,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgBe,QAAQ,EAAE,EAAE;MACrDN,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,UAAU,CAAC;MAAE;MAClCP,WAAW,EAAE,SAAS,CAAE;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,yBAAyB,CAAC;IACnE;IAEA,OAAOP,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5B,CAAC;EAED;EACAY,YAAY,EAAE,MAAOD,QAAQ,IAAK;IAC9B,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,gBAAgBe,QAAQ,EAAE,EAAE;MACrDN,MAAM,EAAE,QAAQ;MAChBR,WAAW,EAAE,SAAS,CAAE;IAC5B,CAAC,CAAC;IAEF,IAAI,CAACF,QAAQ,CAACG,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMJ,QAAQ,CAACK,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIC,KAAK,CAACF,SAAS,CAACG,OAAO,IAAI,yBAAyB,CAAC;IACnE;IAEA,OAAOP,QAAQ,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;EAC5B;AACJ,CAAC;AAED,eAAeR,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}